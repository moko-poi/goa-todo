// Code generated by goa v3.7.0, DO NOT EDIT.
//
// todo HTTP server types
//
// Command:
// $ goa gen github.com/takahashis-shun/todo-goa/design

package server

import (
	todo "github.com/takahashis-shun/todo-goa/gen/todo"
	todoviews "github.com/takahashis-shun/todo-goa/gen/todo/views"
	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "todo" service "create" endpoint HTTP
// request body.
type CreateRequestBody struct {
	// Title
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
}

// UpdateRequestBody is the type of the "todo" service "update" endpoint HTTP
// request body.
type UpdateRequestBody struct {
	// IsDone
	IsDone *bool `form:"is_done,omitempty" json:"is_done,omitempty" xml:"is_done,omitempty"`
}

// ShowResponseBody is the type of the "todo" service "show" endpoint HTTP
// response body.
type ShowResponseBody struct {
	// ID
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Title
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// IsDone
	IsDone *bool `form:"is_done,omitempty" json:"is_done,omitempty" xml:"is_done,omitempty"`
}

// NewShowResponseBody builds the HTTP response body from the result of the
// "show" endpoint of the "todo" service.
func NewShowResponseBody(res *todoviews.TodoView) *ShowResponseBody {
	body := &ShowResponseBody{
		ID:     res.ID,
		Title:  res.Title,
		IsDone: res.IsDone,
	}
	return body
}

// NewHelloPayload builds a todo service hello endpoint payload.
func NewHelloPayload(name string) *todo.HelloPayload {
	v := &todo.HelloPayload{}
	v.Name = name

	return v
}

// NewShowPayload builds a todo service show endpoint payload.
func NewShowPayload(id int) *todo.ShowPayload {
	v := &todo.ShowPayload{}
	v.ID = id

	return v
}

// NewCreatePayload builds a todo service create endpoint payload.
func NewCreatePayload(body *CreateRequestBody) *todo.CreatePayload {
	v := &todo.CreatePayload{
		Title: *body.Title,
	}

	return v
}

// NewUpdatePayload builds a todo service update endpoint payload.
func NewUpdatePayload(body *UpdateRequestBody, id int) *todo.UpdatePayload {
	v := &todo.UpdatePayload{
		IsDone: *body.IsDone,
	}
	v.ID = id

	return v
}

// NewDeletePayload builds a todo service delete endpoint payload.
func NewDeletePayload(id int) *todo.DeletePayload {
	v := &todo.DeletePayload{}
	v.ID = id

	return v
}

// ValidateCreateRequestBody runs the validations defined on CreateRequestBody
func ValidateCreateRequestBody(body *CreateRequestBody) (err error) {
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	return
}

// ValidateUpdateRequestBody runs the validations defined on UpdateRequestBody
func ValidateUpdateRequestBody(body *UpdateRequestBody) (err error) {
	if body.IsDone == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("is_done", "body"))
	}
	return
}
